
coreos:
  update:
    reboot-strategy: off
  etcd2:
    proxy: on
    listen-client-urls: http://0.0.0.0:2379
    initial-cluster: etcdserver=http://<%= kube_master_ip %>:2380
  units:
    - name: etcd2.service
      command: start

    - name: flanneld.service
      command: start
      drop-ins:
        - name: 10-etcd.conf
          content: |
            [Unit]
            Requires=etcd2.service
            After=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config \
            '{ "Network": "<%= pod_cidr %>", "Backend": { "Type": "vxlan" } }'

    - name: docker.service
      command: start
      drop-ins:
        - name: 40-flanneld.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
            Restart=always
            RestartSec=1

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Requires=etcd2.service flanneld.service docker.service
        After=etcd2.service flanneld.service docker.service
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/kubelet -z /opt/bin/kubelet \
            https://storage.googleapis.com/kubernetes-release/release/<%= k8s_version %>/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
        ExecStart=/opt/bin/kubelet \
            --address=0.0.0.0 \
            --port=10250 \
            --hostname-override=%H \
            --api-servers=https://<%= kube_master_ip %>:<%= kube_master_secure_port %> \
            --logtostderr=true \
            --cluster_dns=<%= dns_service_ip %> \
            --cluster_domain=cluster.local \
            --allow_privileged=true \
            --config=/etc/kubernetes/manifests/ \
            --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
            --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
            --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target


write_files:
  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: gcr.io/google_containers/hyperkube:<%= k8s_version %>
          command:
          - /hyperkube
          - proxy
          - --master=https://<%= kube_master_ip %>:<%= kube_master_secure_port %>
          - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
          - --proxy-mode=iptables
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /etc/ssl/certs
              name: "ssl-certs"
            - mountPath: /etc/kubernetes/worker-kubeconfig.yaml
              name: "kubeconfig"
              readOnly: true
            - mountPath: /etc/kubernetes/ssl
              name: "etc-kube-ssl"
              readOnly: true
        volumes:
          - name: "ssl-certs"
            hostPath:
              path: "/usr/share/ca-certificates"
          - name: "kubeconfig"
            hostPath:
              path: "/etc/kubernetes/worker-kubeconfig.yaml"
          - name: "etc-kube-ssl"
            hostPath:
              path: "/etc/kubernetes/ssl"

  - path: /etc/kubernetes/worker-kubeconfig.yaml
    content: |
      apiVersion: v1
      kind: Config
      clusters:
      - name: local
        cluster:
          certificate-authority: /etc/kubernetes/ssl/ca.pem
      users:
      - name: kubelet
        user:
          client-certificate: /etc/kubernetes/ssl/worker.pem
          client-key: /etc/kubernetes/ssl/worker-key.pem
      contexts:
      - context:
          cluster: local
          user: kubelet
        name: kubelet-context
      current-context: kubelet-context